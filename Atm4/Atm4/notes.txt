3844/ 6805 
Asg1 Requirements


1.	You are to write a simple ATM like system that will be menu driven and allow you to do the following.
	a.	Deposit
	b.	Withdraw
	c.	Check Balance
	d.	Exit

2.	You must update the balance with each transaction. 

3.	You must calculate interest based on the entering of dates. 
	This can be accomplished using the Gregorian Calendar Class and DateTime Class. (Available at MSDN)- 
	NOTE you only have to use dates for the current year so that they can be converted to Julian calendar dates to 
	calculate the difference for the interest calculation.

4.	Interest must be calculated based on the dates and with each transaction, even when checking the balance.

5.	You must make sure that the system will not allow you to back date items.

6.	Your balance should default to 100 dollars and the interest rate should default to 5%.

7.	The system must return to the main menu when you are done with all transactions.

8.	You must format your output in US Dollars and round to 2 decimal points for cents.

9.	Your program should have the following classes and functions (suggested)

	a.	ATM Class
		i.		Main Method to start the program
		ii.		TopMenu ( That will allow user to load accounts or populate accounts “if first time running program”, choose accounts or exit) 
		iii.	Array of Accounts as a field. (Chapt 8 in book we will cover in week 7)
	b.	Account Class
		i.		Constructor( ) to initialize and set balance to 100 for each new account.
		ii.		Menu ( ) will show the following options which in turn will call the necessary methods

			1.	Deposit
			2.	Withdraw
			3.	Check Balance
			4.	Exit – this will bust out of loop and take you back to the Top Menu in ATM

		iii.	Necessary Accessor Methods for members
		iv.		Method(s) to get date entry
		v.		Method to calculate interest

10.	You must get the system to work with more than one account
	a.	You will need to create an array, arraylist, or collection of accounts (NO MORE THAN 3 Objects in a collection)
	b.	You will need to loop through these accounts to determine which account the user will work with.
		i.	Such as;  account 0, 1 or 2
		ii.	Or use a field as an account number and loop through looking for that specific account number

11.	You must have the project write out the results to a file.

12.	You must have the program start up and read the results in from the file.

13.	Good Luck!!! We will continue to discuss in class until the project is due.





Create an inheritance hierarchy that a bank might use to represent customers’ bank accounts. 

All customers at this bank can deposit (i.e., credit) money into their accounts and withdraw (i.e.,debit) money from their accounts. 

More specific types of accounts also exist.

Savings accounts, for instance, earn interest on the money they hold. 

Checking accounts, on the other hand, charge a fee per transaction. 

Create base class Account and derived classes SavingsAccount and CheckingAccount that inherit from class Account. 

Base class Account should include one private instance variable of type decimal to represent the account balance. 
The class should provide a constructor that receives an initial balance and uses it to initialize the instance 
variable with a public property. 
The property should validate the initial balance to ensure that it’s greater than or equal to 0.0; if not, throw an exception. 
The class should provide two public methods. 
Method Credit should add an amount to the current balance. 
Method Debit should withdraw money from the Account and ensure that the debit amount does not exceed the Account’s balance. 
If it does, the balance should be left unchanged, and the method should display the message "Debit amount exceeded account balance." 
The class should also provide a get accessor in property Balance that returns the current balance. 

Derived class SavingsAccount should inherit the functionality of an Account, but also include a decimal instance variable 
indicating the interest rate (percentage) assigned to the Account. 
SavingsAccount’s constructor should receive the initial balance, as well as an initial value for the interest rate. 
SavingsAccount should provide public method 
CalculateInterest that returns a decimal indicating the amount of interest earned by an account. 
Method CalculateInterest should determine this amount by multiplying the interest rate by the account balance. 
[Note: SavingsAccount should inherit methods Credit and Debit without redefining them.] 

Derived class CheckingAccount should inherit from base class Account and include a decimal instance variable that represents 
the fee charged per transaction. 
CheckingAccount’s constructor should receive the initial balance, as well as a parameter indicating a fee amount. 
Class CheckingAccount should redefine methods Credit and Debit so that they subtract the fee from the account balance whenever 
either transaction is performed successfully. 
CheckingAccount’s versions of these methods should invoke the base-class Account version to perform the updates to an account balance. 
CheckingAccount’s Debit method should charge a fee only if money is actually withdrawn 
(i.e., the debit amount does not exceed the account balance).
[Hint: Define Account’s Debit method so that it returns a bool indicating whether 
money was withdrawn. Then use the return value to determine whether a fee should be charged.] 

After defining the classes in this hierarchy, write an app that creates objects of each class and tests their methods. 
Add interest to the SavingsAccount object by first invoking its CalculateInterest method, then passing the returned interest 
amount to the object’s Credit method.
